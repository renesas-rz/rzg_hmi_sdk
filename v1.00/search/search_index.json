{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HMI SDK on RZ/G series","text":""},{"location":"#hmi-sdk-on-rzg-series","title":"HMI SDK on RZ/G series","text":"<p>The best solution for starting your HMI applications.</p> <p>HMI SDK are quick and easy solutions for starting HMI.</p> <p> </p>"},{"location":"#whats-new","title":"What's new","text":"<p>2024/07/31</p> <p>RZ/G2L HMI SDK v1.00 is available.</p> <p>View Version History &gt;</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting Started is a complete guide to learn how to run HMI Applications, which explains the procedure for setting up the development environment, compiling HMI Applications, setting up the board and running HMI Applications.</p> <p>Get your target board now and GET STARTED.</p>"},{"location":"#hmi-applications","title":"HMI Applications","text":"<p>HMI Applications provides the source code and prebuilt binary,  which allow you to select the application from various use cases, and run it on the board immediately.</p> Sample Application Name Description <code>lvgl_sample_img_disp</code> LVGL Sample Program for Image Display <code>lvgl_sample_audio_playback</code> LVGL Sample Program for Audio Playback <code>lvgl_sample_video_playback</code> LVGL Sample Program for Video Playback"},{"location":"#demo","title":"Demo","text":"<p>HMI SDK provides an HMI demo named rz_benchmark_demo.</p> <p>It was implemented using LVGL, and you can run some benchmarks on the demo.</p> <p>To set up the environment for the demo, see Getting Started.</p>"},{"location":"#video","title":"Video","text":"<ul> <li> <p>More videos are coming soon ... RenesasPresents.</p> </li> </ul>"},{"location":"download/","title":"Board and Software","text":""},{"location":"download/#board-and-software","title":"Board and Software","text":""},{"location":"download/#rzg2l-evaluation-board-kit-evk","title":"RZ/G2L Evaluation Board Kit (EVK)","text":"<p> Get RZ/G2L EVK</p> <p> Get HMI SDK</p> <p> Get HMI SDK source code</p> <p>Back to Home &gt; Back to Getting Started &gt;</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#faq","title":"FAQ","text":"<p>Please check Renesas \u3088\u304f\u3042\u308b\u3054\u8cea\u554f (FAQ) | Knowledge Base (FAQ's) | \u77e5\u8bc6\u5e93 website.</p> <ul> <li>[JP] RZ/G</li> <li>[EN] RZ/G</li> <li>[CN] RZ/G</li> </ul> <p>And Renesas Engineering Community website.</p> <ul> <li>[JP] RZ MPU</li> <li>[EN] Microprocessors (RZ)</li> <li>[CN] RZ MPU</li> </ul> <p>Also check our Wiki's: RZ/G.</p> <p>If you could not found an appropriate answer for your case, please do not be hesitate to raise an issue at our Repository Issues.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started","title":"Getting Started","text":"<p>This page explains how to start-up the HMI SDK.</p> <p>Note</p> <p>Hereafter, we use following terminology.</p> <ul> <li>EVK: Refers \"Evaluation Board Kit\".</li> </ul>"},{"location":"getting_started/#introduction","title":"Introduction","text":"<p>Getting Started explains the instruction to run HMI Applications.</p> <p>Common instructions are explained in this document.</p>"},{"location":"getting_started/#step-1-obtain-an-evaluation-board","title":"Step 1: Obtain an evaluation board","text":"<p>Click the button below to get the board.</p> <p>Board and SoftwareGet the board and software for RZ/G series.</p> RZ/G2L <p></p> <p>The RZ/G2L Evaluation Board Kit (EVK) is the ideal board kit for RZ/G2L evaluation.</p> <p>Following items are included in the RZ/G2L Evaluation Board Kit.</p> Equipment Details RZ/G2L Evaluation Board Evaluation board itself. Micro USB to Serial Cable For serial communication between PC and the board."},{"location":"getting_started/#step-2-obtain-necessary-environment","title":"Step 2: Obtain necessary environment","text":""},{"location":"getting_started/#1-necessary-equipment","title":"1. Necessary Equipment","text":"<p>Please prepare the following equipment for your EVK.</p> RZ/G2L <p>Equipment</p> <p>Purpose</p> <p>Remarks</p> <p>RZ/G2L Module Board (SMARC2.1) + Common Carrier Board</p> <p>(P/N: RTK9744L23S01000BE)</p> <p>It is used to evaluate not only Linux but also demo programs or applications that run on Linux in the Linux operating environment provided by HMI SDK.</p> <ul> <li>4GB or more ROM (SPI or eMMC or SD)</li> <li>2GB or more RAM (DDR4/DDR3L 16bit x 1.6/1.3Gbps)</li> </ul> <p>Included with RZ/G2L Evaluation Board Kit (EVK).</p> <p>USB serial cable</p> <p>It is used to connect the PC and the EVK and get the console output of Linux running on the EVK.</p> <ul> <li>Connect to micro USB type-B (2.0) port of EVK</li> </ul> <p>Included   with RZ/G2L Evaluation Board Kit (EVK).</p> <p>USB Power Delivery (PD) AC adapter + USB C PD cable for power supply </p> <p>Use for power supply.</p> <ul> <li>Connect to USB type-C port of EVK</li> </ul> <p>PC</p> <p>It can be used to operate the demo environment from a terminal on a PC, rebuild HMI SDK Linux, or use it as a development device for applications.</p> <ul> <li>At least 100GB or more free space of HDD/SDD</li> <li>8GB or more RAM</li> <li>4-core or more CPU</li> </ul> <p>The OS of the PC is as follows. However, Windows PCs are for debugging using a serial connection and cannot be used for development such as building software.</p> <ul> <li>Ubuntu 20.04 LTS, 64-bit version</li> <li>Windows 10 or 11 </li> </ul> <p>HDMI display monitor + HDMI cable</p> <p>Used to display demo programs or applications provided by HMI SDK.</p> <ul> <li>Connect to micro HDMI port of EVK</li> </ul> <p>If you need a touch panel function, you need a panel that supports USB connection.</p> <p>The HMI SDK supports the display of resolutions supported by the Extended Display Identification Data (EDID) information obtained from this HDMI display monitor.</p> <p>USB mouse</p> <p>Used to operate demo programs and applications provided by HMI SDK.</p> <ul> <li>USB HID Compliant</li> </ul> <p>USB hub </p> <p>Used when multiple USB devices are required for the demo program or applications provided by HMI SDK.</p> <p>USB keyboard</p> <p>Used to operate demo programs and applications provided by HMI SDK.</p> <ul> <li>USB HID Compliant</li> </ul> <p>USB touch screen</p> <p>Used to operate demo programs and applications provided by HMI SDK.</p> <ul> <li>USB HID Compliant</li> </ul> <p>Audio speaker</p> <p>Used to evaluate the audio output demo programs or applications provided by HMI SDK.</p> <ul> <li>3.5mm mini plug connector required</li> </ul> <p>micro SD card</p> <p>Linux and demo images provided by the HMI SDK are written and used as a Linux boot device.</p> <ul> <li>Type: SDHC</li> <li>Speed class: UHI-Class 10</li> <li>Capacity: Minimum 4GB, recommended 8GB</li> </ul> <p>Linux on the RZ/G2L EVK is booted from a micro SD card by eSD boot.</p>"},{"location":"getting_started/#2-necessary-software","title":"2. Necessary Software","text":"<p>Please install following software on Linux PC.</p> <ul> <li>git</li> </ul>"},{"location":"getting_started/#step-3-obtain-rzg-hmi-sdk","title":"Step 3: Obtain RZ/G HMI SDK","text":"<p>Please download from Renesas.com website.</p> <p> Get HMI SDK</p> <p> Get HMI SDK source code</p> <p>Once downloaded, please check the Release Note included inside package.</p>"},{"location":"getting_started/#step-4-prepare-hmi-sdk-sd-card-image-for-demo","title":"Step 4: Prepare HMI SDK SD card image for demo","text":"<p>Prebuilt binary are prepared as <code>wic</code> image.</p> RZ/G2L <p><code>wic</code> image is available inside <code>image-file_rzg2l_hmi-sdk_v1.0.zip</code>.</p>"},{"location":"getting_started/#1-in-case-of-windows-pc","title":"1. In case of Windows PC","text":"<ol> <li>Download or copy the release package into your PC</li> <li>Unzip the release package and extract an image file</li> <li> <p>Write the image file to your micro SD card by using one of the following tool</p> <ul> <li>Win32 Disk Imager</li> <li>balenaEtcher</li> </ul> RZ/G2L <p>Image file is:</p> <ul> <li><code>core-image-weston-smarc-rzg2l.wic.gz</code></li> </ul> <p>Caution</p> <p>Even if you see a message such as <code>you need to format the disk</code> before/after writing the image, do not format the SD card.</p> </li> </ol>"},{"location":"getting_started/#2-in-case-of-linux-pc-ubuntu","title":"2. In case of Linux PC (Ubuntu)","text":"<ol> <li>Download or copy the release package into your PC</li> <li>Unzip the release package and extract an image file</li> <li> <p>Insert the micro SD Card into your Linux PC and find the device name of the SD card</p> <p>Use <code>lsblk</code> command to check the device name as follows.</p> <ul> <li> <p>Before inserting the SD card</p> <p></p><pre><code>lsblk\n</code></pre> <pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n    (snip)\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0   512M  0 part /boot/efi\n\u2514\u2500nvme0n1p2 259:2    0 465.3G  0 part /\n</code></pre> </li> <li> <p>After inserting the SD card</p> <p></p><pre><code>lsblk\n</code></pre> <pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n    (snip)\nnvme0n1     259:0    0 465.8G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0   512M  0 part /boot/efi\n\u2514\u2500nvme0n1p2 259:2    0 465.3G  0 part /\nsda           8:0    1  14.5G  0 disk\n\u251c\u2500sda1        8:1    1   500M  0 part /media/user/boot\n\u2514\u2500sda2        8:2    1   3.4G  0 part /media/user/rootfs\n</code></pre> </li> </ul> <p>Note</p> <p>The device name is assigned to the SD card by Linux on your Host PC. It may be named <code>/dev/sd*</code> (<code>*</code> is a letter representing the physical drive). It is <code>/dev/sda</code> in this sample.</p> </li> <li> <p>Unmount the SD card if it is mounted</p> <p>Use <code>umount</code> command with mount points that are displayed when you executed <code>lsblk</code> command. For example:</p> <p></p><pre><code>umount /media/user/boot\numount /media/user/rootfs\n</code></pre> </li> <li> <p>Write the image to the SD card</p> <p>Use <code>bmaptool</code> command with device name of SD card is displayed when you executed <code>lsblk</code> command. For example:</p> <p></p><pre><code>sudo bmaptool copy &lt;wic image&gt;.wic.gz /dev/sda\n</code></pre> RZ/G2L <p>Image file is:</p> <ul> <li><code>core-image-weston-smarc-rzg2l.wic.gz</code></li> </ul> <p>Note</p> <p>Additionally, the files below are also required:</p> <ul> <li><code>core-image-weston-smarc-rzg2l.wic.bmap</code></li> </ul> </li> </ol>"},{"location":"getting_started/#step-5-run-hmi-sdk-demo","title":"Step 5: Run HMI SDK demo","text":""},{"location":"getting_started/#1-setup-evks-peripheral","title":"1. Setup EVK's peripheral","text":"<p>Please setup following below diagram.</p> RZ/G2L <p></p>"},{"location":"getting_started/#2-setup-evks-dip-switch","title":"2. Setup EVK's DIP switch","text":"RZ/G2L <p>Set up DIP switch SW1 and SW11 as follows.</p> <ul> <li> <p>SW1</p> <p></p> SW1-1 SW1-2 ON ON </li> <li> <p>SW11</p> <p></p> SW11-1 SW11-2 SW11-3 SW11-4 ON ON OFF ON </li> </ul>"},{"location":"getting_started/#3-turn-on-evk-and-run-demo","title":"3. Turn on EVK and run demo","text":"RZ/G2L <ol> <li>Insert the bootable SD card created at Step 4</li> <li>Connect a USB cable to CN6 for power supply</li> <li> <p>Press and hold power button (SW9) for 1 second to turn on the EVK</p> <p>Note</p> <p>Press and hold the button for 2 seconds when you turn off the EVK.</p> </li> </ol>"},{"location":"getting_started/#step-6-build-sample-application","title":"Step 6: Build sample application","text":"<p>This step explains how to build HMI SDK sample application.  To see the overview about HMI Applications, please refer to HMI Applications.</p> <p>Note</p> <p>This step requires a Linux PC (Ubuntu).</p> <p>The prebuilt binary of executable files are also provided, and you can run it directly.</p> <ol> <li> <p>Install cross compiler to you Linux PC (Ubuntu)</p> <p>Note</p> <p>This step is optional, as prebuilt binaries was prepared.</p> <p></p><pre><code>sudo sh ./poky-glibc-x86_64-core-image-weston-sdk-aarch64-toolchain-3.1.31.sh\n</code></pre> <p>Note</p> <p>Please set target directory (default: <code>/opt/poky/3.1.31</code>).</p> </li> <li> <p>Enable cross compiler</p> <p>Note</p> <p>This step is optional, as prebuilt binaries was prepared.</p> <p></p><pre><code>source /opt/poky/3.1.31/environment-setup-aarch64-poky-linux\n</code></pre> <p>Note</p> <p>Please make sure where cross compiler is installed (default: <code>/opt/poky/3.1.31</code>).</p> </li> <li> <p>Clone sample application source code</p> <p></p><pre><code>git clone https://github.com/renesas-rz/rzg_hmi_sdk\n</code></pre> </li> <li> <p>Go to source code working directory</p> <p></p><pre><code>cd rzg_hmi_sdk/sample_app/&lt;sample-application-directory&gt;\n</code></pre> <p>Note</p> <p>Existing <code>&lt;sample-application-directory&gt;</code>(s) are listed on below table.</p> <code>&lt;sample-application-directory&gt;</code> Description <code>lvgl_sample_img_disp</code> LVGL Sample Program for Image Display <code>lvgl_sample_audio_playback</code> LVGL Sample Program for Audio Playback <code>lvgl_sample_video_playback</code> LVGL Sample Program for Video Playback </li> <li> <p>Build sample application</p> <p>Note</p> <p>This step is optional, as prebuilt binaries was prepared.</p> <p></p><pre><code>make\n</code></pre> </li> <li> <p>Executable file of sample application</p> <p>Each executable file of sample application built as <code>rzg_hmi_sdk/sample_app/&lt;sample-application-directory&gt;/&lt;sample-application-binary&gt;</code>.</p> <p>Note</p> <p>Executable file name (<code>&lt;sample-application-binary&gt;</code>) are same with <code>&lt;sample-application-directory&gt;</code> name.</p> <p>For example in case <code>lvgl_sample_img_disp</code>, path to executable file is:</p> <p></p><pre><code>&lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_img_disp/lvgl_sample_img_disp\n</code></pre> </li> </ol>"},{"location":"getting_started/#step-7-deploy-sample-application","title":"Step 7: Deploy sample application","text":"<p>Note</p> <p>This step requires a Linux PC (Ubuntu).</p>"},{"location":"getting_started/#1-over-ethernet-using-scp","title":"1. Over ethernet (using <code>SCP</code>)","text":"<ol> <li> <p>Boot and connect your EVK into your local network</p> <p>Connect an ethernet cable to RJ45 port for networking.</p> RZ/G2L <p>RJ45 ports are CN8 and CN9.</p> <p>Note</p> <p>Just connect 1 ethernet cable to CN8 or CN9.</p> <p>Note</p> <p>Your EVK will run the demo program automatically.</p> <p>Please exit the demo by pressing the keyboard keys Ctrl+C, before proceeding to the next step.</p> </li> <li> <p>Check your EVK's IP</p> <p>Open terminal of your EVK, and check using <code>ip</code> command as below.</p> <p></p><pre><code>ip a\n</code></pre> <p>Note</p> <p>For example, when RZ/G2L EVK's CN8 ethernet port connected to local network.</p> <pre><code>root@smarc-rzg2l:~# ip a | grep eth\n5: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,DYNAMIC,UP&gt; mtu 1500 qdisc mq state DOWN group default qlen 1000\n    link/ether f2:d6:18:24:f0:6b brd ff:ff:ff:ff:ff:ff\n6: eth1: &lt;BROADCAST,MULTICAST,DYNAMIC,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 72:26:f0:8b:64:59 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.32/24 brd 192.168.0.255 scope global dynamic eth1\n</code></pre> <p>EVK's IP is <code>192.168.0.32</code> (at <code>eth1</code>).</p> </li> <li> <p>Copy executable into your EVK storage (SD card)</p> <p>Send executable file from your Linux PC (Ubuntu) using <code>scp</code> command as below.</p> <p></p><pre><code>scp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/&lt;sample-application-directory&gt;/&lt;sample-application-binary&gt; root@&lt;your-EVK-IP&gt;:/home/root/\n</code></pre> <p>Note</p> <p>We recommend you to copy to <code>/home/root</code> directory.</p> <p>Don't forget to replace <code>&lt;your-EVK-IP&gt;</code> with your EVK's IP.</p> </li> <li> <p>Copy resources required by sample application</p> <code>lvgl_sample_img_disp</code><code>lvgl_sample_audio_playback</code><code>lvgl_sample_video_playback</code> <p></p><pre><code>scp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_img_disp/sample/* root@&lt;your-EVK-IP&gt;:/usr/share/images/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/images/</code> directory of EVK.</p> <p></p><pre><code>scp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_audio_playback/sample/* root@&lt;your-EVK-IP&gt;:/usr/share/sounds/sample/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/sounds/sample/</code> directory of EVK.</p> <p></p><pre><code>scp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_video_playback/sample/* root@&lt;your-EVK-IP&gt;:/usr/share/movies/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/movies/</code> directory of EVK.</p> </li> </ol>"},{"location":"getting_started/#2-directly-write-into-hmi-sdks-sd-card","title":"2. Directly write into HMI SDK's SD card","text":"<ol> <li>Turn off your EVK (if its on)</li> <li>Insert and mount your SD card into PC</li> <li> <p>Copy executable into your SD card</p> <p>For example, in case mounted on <code>/media/user/rootfs</code>.</p> <p></p><pre><code>cp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/&lt;sample-application-directory&gt;/&lt;sample-application-binary&gt; /media/user/rootfs/home/root/\n</code></pre> <p>Note</p> <p>We recommend you to copy to <code>/home/root</code> directory.</p> <p>If you not sure where is your SD card mounted, please check it using <code>lsblk</code> command (see Step 4.2.3).</p> </li> <li> <p>Copy resources required by sample application</p> <p>For example, in case mounted on <code>/media/user/rootfs</code>.</p> <code>lvgl_sample_img_disp</code><code>lvgl_sample_audio_playback</code><code>lvgl_sample_video_playback</code> <p></p><pre><code>cp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_img_disp/sample/* /media/user/rootfs/usr/share/images/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/images/</code> directory on SD card.</p> <p></p><pre><code>cp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_audio_playback/sample/* /media/user/rootfs/usr/share/sounds/sample/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/sounds/sample/</code> directory on SD card.</p> <p></p><pre><code>cp &lt;path-to&gt;/rzg_hmi_sdk/sample_app/lvgl_sample_video_playback/sample/* /media/user/rootfs/usr/share/movies/\n</code></pre> <p>Caution</p> <p>Make sure you are copying to <code>/usr/share/movies/</code> directory on SD card.</p> </li> </ol>"},{"location":"getting_started/#step-8-run-sample-application","title":"Step 8: Run sample application","text":"<ol> <li> <p>Boot your EVK (if not yet)</p> <p>Note</p> <p>Your EVK will run the demo program automatically.</p> <p>Please exit the demo by pressing the keyboard keys Ctrl+C, before proceeding to the next step.</p> </li> <li> <p>Go to <code>/home/root</code> directory</p> <p>Open terminal of your EVK, and go to <code>/home/root</code> using <code>cd</code> command as below.</p> <p></p><pre><code>cd /home/root\n</code></pre> </li> <li> <p>Set sample application binary executable</p> <p></p><pre><code>chmod +x &lt;sample-application-binary&gt;\n</code></pre> </li> <li> <p>Execute sample application binary</p> <p></p><pre><code>./&lt;sample-application-binary&gt;\n</code></pre> </li> </ol>"},{"location":"history/","title":"Version","text":""},{"location":"history/#version","title":"Version","text":""},{"location":"history/#rzg2l-hmi-sdk-v100","title":"RZ/G2L HMI SDK v1.00","text":"<p>2024/07/31</p> <p>RZ/G2L HMI SDK v1.00 is available.</p> <p>Back to Home &gt;</p>"},{"location":"how_to_build_hmi_sdk/","title":"How To Build HMI SDK","text":""},{"location":"how_to_build_hmi_sdk/#how-to-build-hmi-sdk","title":"How To Build HMI SDK","text":""},{"location":"how_to_build_hmi_sdk/#introduction","title":"Introduction","text":"<p>HMI SDK is a quick and easy HMI Application development environment.</p> <p>To modify Linux component, you need to build HMI SDK from source code.  HMI SDK source code will generate same Linux environment as HMI SDK.</p> <p>This page explains how to build HMI SDK source code.  After you have completed this page, you would be able to change the source code and customize Linux environment (i.e., memory map, additional OSS etc...).</p> <p>Requirement</p> <ol> <li>Users have launched Evaluation Board Kit according to Getting Started,     which means they can run HMI Application on the board.</li> <li> <p>To build Yocto Linux, the below equipment should be prepared.</p> <p>Equipment</p> <p>Details</p> <p>Linux PC</p> <p>Approximately 110GB free space is necessary.</p> <p>OS</p> <p>Ubuntu 20.04 LTS</p> <p>64bit OS must be used.</p> </li> </ol>"},{"location":"how_to_build_hmi_sdk/#step-1-obtain-hmi-sdk-source-code","title":"Step 1: Obtain HMI SDK source code","text":"<p>Download HMI SDK source code from below link.</p> <p> Get HMI SDK</p> <p> Get HMI SDK source code</p>"},{"location":"how_to_build_hmi_sdk/#step-2-build-hmi-sdk-source-code","title":"Step 2: Build HMI SDK source code","text":"<p>This step explains how to build Linux environment with HMI SDK source code.</p> <p>Note</p> <p>In the following instructions, text in angle brackets should be replaced with a character string that depends on your environment.</p> <p>The brackets <code>&lt;</code> and <code>&gt;</code> are unnecessary in the text.</p> <ol> <li> <p>Install the required packages</p> <p>Install some packages into your Linux PC, which are necessary in the following steps.</p> <p></p><pre><code>sudo apt-get update\nsudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio python python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping libsdl1.2-dev xterm p7zip-full libyaml-dev libssl-dev bmap-tools\n</code></pre> </li> <li> <p>Set up your <code>git</code> environment</p> <p>Set up your <code>git</code> environment if you have never done it.</p> <p></p><pre><code>git config --global user.email \"&lt;Your email address&gt;\"\ngit config --global user.name \"&lt;Your user name&gt;\"\n</code></pre> <p>Note</p> <p>For more information, refer to Yocto Project Quick Build.</p> </li> <li> <p>Set environment variables</p> <p>Set the following environment variables.</p> RZ/G2L <p></p><pre><code>export WORK=&lt;A directory path for building&gt;\nexport PLATFORM=rzg2l\nexport BOARD=smarc-rzg2l\nexport SDK_PKG_DIR=&lt;A directory path for HMI SDK source code packages&gt;\n</code></pre> <p>Note</p> <p>Currently, RZ/G Linux HMI SDK supports only <code>rzg2l</code> for <code>PLATFORM</code> and <code>smarc-rzg2l</code> for <code>BOARD</code>.</p> <p>The directory set to <code>SDK_PKG_DIR</code> shall include the HMI SDK source code package such as <code>RTK0EF0195F*SJ_linux-src.zip</code>.</p> </li> <li> <p>Extract Yocto recipe package</p> <p>Decompress the source code package, create a working directory, and extract Yocto recipe package.</p> RZ/G2L <p></p><pre><code>cd ${SDK_PKG_DIR}\nunzip RTK0EF0195F*SJ_linux-src.zip\n</code></pre> <p></p><pre><code>mkdir -p ${WORK}\ncd ${WORK}\ntar xf ${SDK_PKG_DIR}/RTK0EF0195F*SJ_linux-src/yocto_recipe_rzg2l_hmi-sdk_v*.tar.gz --strip-components 1\n</code></pre> </li> <li> <p>Initialize build environment</p> <p>Run an environment setup script as follows.</p> <p></p><pre><code>cd ${WORK}\nTEMPLATECONF=${PWD}/meta-renesas/meta-${PLATFORM}/docs/template/conf/ source poky/oe-init-build-env build\n</code></pre> </li> <li> <p>Add layers</p> <p>Add necessary Yocto <code>meta-layers</code> layer as follows.</p> <p></p><pre><code>cd ${WORK}/build\nbitbake-layers add-layer ../meta-rz-features/meta-rz-graphics\nbitbake-layers add-layer ../meta-rz-features/meta-rz-codecs\nbitbake-layers add-layer ../meta-rz-demos\n</code></pre> </li> <li> <p>Set up environment for offline build</p> <p>This step is configuration for offline building.</p> <p>If you would like to get source code via network when you build the HMI SDK, skip this step.</p> <p>Change the environment variable <code>BB_NO_NETWORK</code> in <code>local.conf</code> from <code>0</code>  to <code>1</code> using <code>sed</code> command.</p> <p></p><pre><code>cd ${WORK}/build\nsed -i \"s|\\(BB_NO_NETWORK =.*\\)\\\"0\\\"|\\1\\\"1\\\"|\" \"conf/local.conf\"\n</code></pre> <p>Decompress OSS source code package and set it into the build environment.</p> RZ/G2L <p></p><pre><code>cd ${SDK_PKG_DIR}/RTK0EF0195F*SJ_linux-src/\n7z x oss-souce-code-pkg_rzg2l_hmi-sdk_v*.7z\nmv oss-souce-code-pkg_rzg2l_hmi-sdk_v*/downloads/ ${WORK}/build/\n</code></pre> </li> <li> <p>Modify configurations for build environment</p> <p>Add <code>IMAGE_INSTALL_append</code> and <code>WHITELIST_GPL-3.0</code> to <code>local.conf</code> as follows.</p> <p></p><pre><code>cd ${WORK}/build\nsed -i '$aIMAGE_INSTALL_append = \\\" packagegroup-lvgl-demo packagegroup-benchmark-tools packagegroup-rz-benchmark-demo\\\"' \"conf/local.conf\"\nsed -i '$aWHITELIST_GPL-3.0 += \\\" glmark2 \\\"' \"conf/local.conf\"\n</code></pre> </li> <li> <p>Build images</p> <p>Run <code>bitbake</code> command to build images.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake core-image-weston\n</code></pre> <p>Note</p> <p>If you need to create an SDK toolchain, run <code>bitbake</code> command as follows.</p> <p></p><pre><code>cd ${WORK}/build\nMACHINE=${BOARD} bitbake core-image-weston -c populate_sdk\n</code></pre> <p>Note</p> <p>After building images or SDK toolchain, you can find them in the following directories respectively.</p> <ul> <li>Images: <code>${WORK}/build/tmp/deploy/images/${BOARD}/</code></li> <li>SDK toolchain: <code>${WORK}/build/tmp/deploy/sdk/</code></li> </ul> </li> </ol>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":"<p>RZ/G HMI Software Development Kit (HMI SDK) is a HMI application development environment for Evaluation Board Kit of RZ/G series.</p> <p>Since it contains Yocto Linux with bootloader, Linux Kernel, Cross Compiler, multimedia and graphics package, users can develop HMI Applications\u00a0easily\u00a0and\u00a0quickly\u00a0with HMI SDK.</p> <p>HMI SDK is specifically made for the supported Evaluation Board Kit with fixed Linux components. For those of you who would like to customize Linux environment, i.e., change memory map or develop your own board, you need to build the Yocto Linux source code.</p> <p>Please refer to How to Build HMI SDK.</p> <p>How To Build HMI SDK</p>"},{"location":"overview/#key-features","title":"Key Features","text":""},{"location":"overview/#supported-devices","title":"Supported Devices","text":"<ul> <li>RZ/G2L Evaluation Board Kit (RTK9744L23S01000BE)</li> </ul>"},{"location":"overview/#file-contents","title":"File Contents","text":"<p>HMI SDK provides following files.</p> <p>Package</p> <p>Items</p> <p>Details</p> <p>HMI SDK</p> <p>Release Note</p> <p>PDF documentation that contains RZ/G HMI SDK release information.</p> <p>board_setup</p> <p>SD card Image (WIC format)</p> <p>Boot image of HMI SDK for eSD Boot.</p> <p>Bootloader</p> <p>Files to boot the board. (Option*)</p> <p>Linux Kernel Files</p> <p>Pre-build binary files for RZ/G Linux Kernel. (Option*)</p> <p>Root filesystem</p> <p>Filesystem for the RZ/G Linux. (Option*)</p> <p>hmi_sdk_setup</p> <p>HMI SDK Installer</p> <p>Installer for HMI application development environment on Docker.</p> <p>Cross Compiler</p> <p>Compiler for Linux application on RZ/G Linux.</p> <p>documents</p> <p>Related Documents</p> <p>License List.</p> <p>references</p> <p>Reference information</p> <p>Files that is referred by Linux license information documentation.</p> <p>HMI SDK Source Code</p> <p>README</p> <p>Release information of HMI SDK Source Code</p> <p>Yocto Linux   Recipe</p> <p>Linux source code of HMI SDK.</p> <p>OSS Source   Code</p> <p>Source code of Open Source Software packages used to build HMI SDK.</p>"},{"location":"overview/#specification","title":"Specification","text":""},{"location":"overview/#features","title":"Features","text":"Components Version Detail Linux Kernel 5.10.201-cip41 SLTS(Super Long Term Support) Kernel Yocto 3.1.31 (dunfell) Distribution for embedded linux gcc 8.3.0 (Arm GCC 8.3-2019.03) Compiler glibc 2.28 busybox 1.30.1 openssl 1.1.1n GStreamer1.0<sup>1</sup> 1.16.3 GStreamer UM for RZ/G2L wayland 1.18.0 weston 8.0.0 Python3 3.8.14 lvgl 8.3.11 lv-drivers 8.3.0 Firacode 6.2 Tomlc99 Latest version<sup>2</sup> OpenCL OpenCL Overview OpenGLES OpenGL ES Overview OpenMAX IL 1.1 OpenMAX IL Overview <ol> <li> <p>For GStreamer Sample Applications please visit this repository. \u21a9</p> </li> <li> <p>Commit ID 5221b3d. \u21a9</p> </li> </ol>"},{"location":"overview/#memory-map","title":"Memory Map","text":"RZ/G2L <p>Please see the memory map at Linux Interface Specification Kernel Core User\u2019s Manual: Software for RZ/G2L Group, RZ/V2L Group, and RZ/Five.</p> <p><code>RTK0EF0045Z9006AZJ-v3.0.6.zip</code> &gt; <code>r01us0468ej0108-rz-g_Kernel_Core_UME.pdf</code> page 5-6.</p> <p> Get User's Manual: SoftwareRZ/G2L Group, RZ/V2L Group, and RZ/Five</p>"}]}